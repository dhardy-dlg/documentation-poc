"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[916],{2628:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=t(4848),o=t(8453);const s={title:"Code best practice and standard"},r="Code Best Practices and Standards",a={id:"dev-team/code-standard",title:"Code best practice and standard",description:"Code Formatting",source:"@site/docs/dev-team/code-standard.md",sourceDirName:"dev-team",slug:"/dev-team/code-standard",permalink:"/documentation-poc/docs/dev-team/code-standard",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dev-team/code-standard.md",tags:[],version:"current",frontMatter:{title:"Code best practice and standard"},sidebar:"tutorialSidebar",previous:{title:"Dev - Basics",permalink:"/documentation-poc/docs/category/dev---basics"},next:{title:"Infrastructure",permalink:"/documentation-poc/docs/dev-team/infrastructure"}},c={},l=[{value:"Code Formatting",id:"code-formatting",level:2},{value:"Language-Specific Guidelines",id:"language-specific-guidelines",level:3},{value:"Python",id:"python",level:4},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:4},{value:"HTML/CSS",id:"htmlcss",level:4},{value:"Pre-Commit Hooks",id:"pre-commit-hooks",level:2},{value:"Setting Up Pre-Commit Hooks",id:"setting-up-pre-commit-hooks",level:3},{value:"Common Hooks to Include",id:"common-hooks-to-include",level:3},{value:"Recommended Editors/IDEs",id:"recommended-editorsides",level:2},{value:"General Configuration",id:"general-configuration",level:3},{value:"VS Code Specific Settings",id:"vs-code-specific-settings",level:3},{value:"PyCharm Specific Settings",id:"pycharm-specific-settings",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"code-best-practices-and-standards",children:"Code Best Practices and Standards"})}),"\n",(0,i.jsx)(n.h2,{id:"code-formatting",children:"Code Formatting"}),"\n",(0,i.jsx)(n.p,{children:"Proper code formatting improves readability, consistency, and maintainability across projects. The following are the key formatting guidelines:"}),"\n",(0,i.jsx)(n.h3,{id:"language-specific-guidelines",children:"Language-Specific Guidelines"}),"\n",(0,i.jsx)(n.h4,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.p,{children:"Adhere to the PEP 8 standard.\nLine length: 79 characters.\nIndentation: 4 spaces per level.\nUse snake_case for function and variable names.\nClass names should use CamelCase.\nPrefer single quotes for strings unless the string contains a single quote.\nPlace imports at the top of the file in the following order:\nStandard library imports\nRelated third-party imports\nLocal application imports"}),"\n",(0,i.jsx)(n.h4,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"Use Prettier for formatting.\nLine length: 100 characters.\nIndentation: 2 spaces per level.\nUse camelCase for variables and functions.\nUse PascalCase for classes and components.\nUse const and let instead of var.\nAlways use semicolons.\nPrefer single quotes for strings."}),"\n",(0,i.jsx)(n.h4,{id:"htmlcss",children:"HTML/CSS"}),"\n",(0,i.jsx)(n.p,{children:"Indentation: 2 spaces.\nLowercase all tags and attribute names.\nClose all tags (even self-closing tags).\nUse double quotes for attribute values.\n1.2. General Formatting Guidelines\nKeep lines short and avoid horizontal scrolling.\nConsistently apply comments for clarity:\nDocument all functions and classes with docstrings or block comments.\nUse inline comments only for non-obvious logic.\nAvoid trailing whitespace at the end of lines.\nOrganize code into logical sections and functions for readability."}),"\n",(0,i.jsx)(n.h2,{id:"pre-commit-hooks",children:"Pre-Commit Hooks"}),"\n",(0,i.jsx)(n.p,{children:"Pre-commit hooks are scripts that run automatically before you commit code to the repository, ensuring quality standards are met before code is checked in."}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-pre-commit-hooks",children:"Setting Up Pre-Commit Hooks"}),"\n",(0,i.jsx)(n.p,{children:"Install pre-commit:"}),"\n",(0,i.jsx)(n.p,{children:"Ensure pre-commit is installed locally using pip or npm based on the technology stack:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install pre-commit\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install pre-commit\n"})}),"\n",(0,i.jsx)(n.p,{children:"Configuration: Create a .pre-commit-config.yaml file at the root of the repository with the following standard hooks:"}),"\n",(0,i.jsx)(n.p,{children:"Python:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.0.0\n  hooks:\n    - id: trailing-whitespace\n    - id: end-of-file-fixer\n    - id: flake8\n- repo: https://github.com/pre-commit/mirrors-black\n  rev: v21.7b0\n  hooks:\n    - id: black\n"})}),"\n",(0,i.jsx)(n.p,{children:"JavaScript/TypeScript:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.0.0\n  hooks:\n    - id: trailing-whitespace\n    - id: end-of-file-fixer\n- repo: https://github.com/pre-commit/mirrors-eslint\n  rev: v7.32.0\n  hooks:\n    - id: eslint\n"})}),"\n",(0,i.jsx)(n.p,{children:"Running Pre-Commit:"}),"\n",(0,i.jsx)(n.p,{children:"To install hooks for the first time:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pre-commit install\n"})}),"\n",(0,i.jsx)(n.p,{children:"To run pre-commit manually on all files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pre-commit run --all-files\n"})}),"\n",(0,i.jsx)(n.h3,{id:"common-hooks-to-include",children:"Common Hooks to Include"}),"\n",(0,i.jsx)(n.p,{children:"Formatting:\nAuto-format code (e.g., with black for Python, Prettier for JavaScript/TypeScript).\nLinting:\nRun linters (e.g., flake8 for Python, eslint for JavaScript).\nSecurity:\nRun security checks using tools like bandit for Python or npm audit for JavaScript.\nCode Quality:\nEnforce best practices with tools like pylint or eslint.\nTesting:\nEnsure that unit tests pass before allowing commits (pytest, jest).\n3. Editor Configuration\nTo ensure consistency across all team members' local environments, configure the editor or IDE as follows:"}),"\n",(0,i.jsx)(n.h2,{id:"recommended-editorsides",children:"Recommended Editors/IDEs"}),"\n",(0,i.jsx)(n.p,{children:"Python: PyCharm, VS Code\nJavaScript/TypeScript: VS Code, WebStorm\nHTML/CSS: VS Code, Sublime Text"}),"\n",(0,i.jsx)(n.h3,{id:"general-configuration",children:"General Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Enable Auto-Formatting:"}),"\n",(0,i.jsx)(n.p,{children:"Configure the editor to auto-format on save using tools like black, Prettier, or custom settings.\nConfigure Indentation:"}),"\n",(0,i.jsx)(n.p,{children:"Ensure spaces are used for indentation (no tabs), and specify the appropriate number of spaces (e.g., 2 for JS, 4 for Python).\nLinting Integration:"}),"\n",(0,i.jsx)(n.p,{children:"Enable integrated linters (e.g., flake8 for Python, eslint for JavaScript) to display warnings and errors as you code.\nTrailing Whitespace and Newlines:"}),"\n",(0,i.jsx)(n.p,{children:"Configure the editor to trim trailing whitespace and insert a final newline at the end of files automatically."}),"\n",(0,i.jsx)(n.h3,{id:"vs-code-specific-settings",children:"VS Code Specific Settings"}),"\n",(0,i.jsx)(n.p,{children:"Add the following settings in your .vscode/settings.json file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "editor.formatOnSave": true,\n  "editor.trimAutoWhitespace": true,\n  "files.insertFinalNewline": true,\n  "python.linting.flake8Enabled": true,\n  "python.linting.enabled": true,\n  "prettier.singleQuote": true,\n  "prettier.semi": true,\n  "eslint.enable": true,\n  "files.eol": "\\n"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pycharm-specific-settings",children:"PyCharm Specific Settings"}),"\n",(0,i.jsx)(n.p,{children:"Auto-format on save:\nNavigate to File > Settings > Tools > Actions on Save, and enable auto-formatting with black (for Python) or appropriate formatters.\nCode style:\nGo to File > Settings > Editor > Code Style, set indentation, and enable removal of trailing whitespace."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);